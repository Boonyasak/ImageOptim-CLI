#!/bin/sh

# Copyright Â© 2013 Jamie Mason, @GotNoSugarBaby,
# https://github.com/JamieMason

# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# ==============================================================================
# GLOBALS
# ==============================================================================

# current version of ImageOptim-CLI from package.json
VERSION="1.6.8"

# "stdin"     == find img/*.gif | imageOptim
# "directory" == imageOptim --directory img/
RUN_MODE="stdin"

# value of --directory when RUN_MODE is "directory"
DIR_PATH="false"

# absolute path to this script
CLI_PATH="false"

# not configurable
USE_OPTIM="true"

# enabled by --image-alpha
USE_ALPHA="false"

# enabled by --jpeg-mini
USE_JPEGMINI="false"

# enabled by --quit
QUIT_AFTER="false"

# how often to poll Pornel's apps to check if finished
WAIT_INTERVAL=1

# file types supported by each app
ALPHA_TYPES=".*(png)"
OPTIM_TYPES=".*(bmp|gif|jpeg|jpg|pcx|png|pnm|tga|tiff)"
JPEGMINI_TYPES=".*(jpg|jpeg)"

# bundle ids for each app
ALPHA_ID="net.pornel.ImageAlpha"
OPTIM_ID="net.pornel.ImageOptim"
JPEGMINI_ID="com.icvt.JPEGmini"
JPEGMINI_ID_RETAIL="com.icvt.JPEGmini-retail"

# app process names
ALPHA_NAME="ImageAlpha"
OPTIM_NAME="ImageOptim"
JPEGMINI_NAME="JPEGmini"

# app .app file names
ALPHA_FILE="ImageAlpha.app"
OPTIM_FILE="ImageOptim.app"
JPEGMINI_FILE="JPEGmini.app"

# log file sizes before and after each app
FILE_SIZES=()

# ==============================================================================
# App Launchers
# ==============================================================================

# ($1:appFileName, $2:imageFilePath):
function addImageToQueue {
  open -g -a $1 "$2"
}

# ($1:fileTypes, $2:appFileName, $3:dirPath): Queue direcory of images
function addDirectoryToQueue {
  find -E "$3" -regex $1 -print0 | while IFS= read -r -d $'\0' file; do
    addImageToQueue $2 "$file"
  done
}

# ($1:fileTypes, $2:appFileName, $3:dirPath):
function runPornelAppOnDirectory {
  addDirectoryToQueue $1 $2 "$3"
}

# ($1:dirPath):
function runImageOptimOnDirectory {
  runPornelAppOnDirectory $OPTIM_TYPES $OPTIM_FILE "$1"
}

# ($1:dirPath):
function runImageAlphaOnDirectory {
  runPornelAppOnDirectory $ALPHA_TYPES $ALPHA_FILE "$1"
}

# ($1:appFileName, $2:image):
function runPornelAppOnImage {
  addImageToQueue $1 "$2"
}

# ($1:image):
function runImageOptimOnImage {
  echo "ImageOptim: $1"
  runPornelAppOnImage $OPTIM_FILE "$1"
}

# ($1:image):
function runImageAlphaOnImage {
  echo "ImageAlpha: $1"
  runPornelAppOnImage $ALPHA_FILE "$1"
}

# ($1:path):
function runJPEGmini {
  echo "JPEGmini: $1"
  `osascript "$CLI_PATH/imageOptimAppleScriptLib" run_jpegmini "$1" $JPEGMINI_NAME` > /dev/null 2>&1
}

# ==============================================================================
# App Watchers
# ==============================================================================

# ($1:appName): Get the number of processes in use by an Application
function countProcesses {
  printf $(ps -aef | grep  "[${1:0:1}]${1:1}.app" | wc -l)
}

# ($1:appName): Sleep until app is done optimising images
function waitForApp {
  # wait for App to spawn a few processes
  sleep 2
  # wait until those processes have completed
  while [[ $(countProcesses $1) > "1" ]]; do
    sleep $WAIT_INTERVAL
  done
}

# ($1:appName):
function waitForPornelApp {
  waitForApp $1
  if [ "true" == $QUIT_AFTER ]; then
    osascript -e "tell application \"$1\" to quit"
  fi
}

# ():
function waitForImageOptim {
  if [ "true" == $USE_OPTIM ]; then
    waitForPornelApp $OPTIM_NAME
  fi
}

# ():
function waitForImageAlpha {
  if [ "true" == $USE_ALPHA ]; then
    waitForPornelApp $ALPHA_NAME
  fi
}

# ():
function waitForJPEGmini {
  if [ "true" == $USE_JPEGMINI ]; then
    sleep 1
    `osascript "$CLI_PATH/imageOptimAppleScriptLib" wait_for $JPEGMINI_NAME` > /dev/null 2>&1
    if [ "true" == $QUIT_AFTER ]; then
      osascript -e "tell application \"$JPEGMINI_NAME\" to quit"
    fi
  fi
}

# ==============================================================================
# File Sizes
# ==============================================================================

# ($1:path)
function sizeInBytes {
  stat -f %z "$1"
}

# ($1:bytes) -> kilobytes
# Convert a value in bytes to kilobytes to 3 decimal places, so 1b is
# 0.001kb
# EXAMPLE: (1500) -> 1.500
function toKb {
  echo $(bc <<< "scale=3; $1/1000")
}

# ==============================================================================
# Handle Directory
# ==============================================================================

# ()
function handleDirectory {
  startTime=$(now)
  imgCount=$(getImgCount "$DIR_PATH")
  echo "Processing $imgCount images..."

  files=( $(find -E "$DIR_PATH" -regex '.*(bmp|gif|jpeg|jpg|pcx|png|pnm|tga|tiff)') )

  forEachFileOfType files[@] '.*(bmp|gif|jpeg|jpg|pcx|png|pnm|tga|tiff)' logFileSizeBeforeStarting

  if [ "true" == $USE_ALPHA ]; then
    runImageAlphaOnDirectory "$DIR_PATH"
    waitForImageAlpha
    forEachFileOfType files[@] '.*(png)' logFileSizeAfterImageAlpha
  fi

  if [ "true" == $USE_JPEGMINI ]; then
    runJPEGmini "$DIR_PATH"
    waitForJPEGmini
    forEachFileOfType files[@] '.*(jpg|jpeg)' logFileSizeAfterJpegMini
  fi

  if [ "true" == $USE_OPTIM ]; then
    runImageOptimOnDirectory "$DIR_PATH"
    waitForImageOptim
    forEachFileOfType files[@] '.*(bmp|gif|jpeg|jpg|pcx|png|pnm|tga|tiff)' logFileSizeAfterImageOptim
  fi

  function end {
    echo "$1" | cut -c1-60
  }

  format="%-60s %12s %12s %10s %12s %10s\n"
  printf "$format" "Image" "Before" "ImageAlpha" "JPEGmini" "ImageOptim" "Savings"

  for file in "${files[@]}"; do
    local var=${file//[^a-zA-Z0-9]/x}

    originalSizeVar="original_${var}"
    imagealphaSizeVar="imagealpha_${var}"
    jpegminiSizeVar="jpegmini_${var}"
    imageoptimSizeVar="imageoptim_${var}"

    originalSize="${!originalSizeVar}"
    imagealphaSize=${!imagealphaSizeVar}
    jpegminiSize=${!jpegminiSizeVar}
    imageoptimSize="${!imageoptimSizeVar}"
    savings=$(echo "$originalSize - $imageoptimSize" | bc)

    savings="$(toKb $savings)kb"
    originalSize="$(toKb $originalSize)kb"
    imageoptimSize="$(toKb $imageoptimSize)kb"

    if [ ! -e $imagealphaSize ]; then
      imagealphaSize="$(toKb $imagealphaSize)kb"
    else
      imagealphaSize="-"
    fi

    if [ ! -e $jpegminiSize ]; then
      jpegminiSize="$(toKb $jpegminiSize)kb"
    else
      jpegminiSize="-"
    fi

    printf "$format" $(end "$file") "$originalSize" "$imagealphaSize" "$jpegminiSize" "$imageoptimSize" "$savings"

  done

  endTime=$(now)
  success "Finished in $(getTimeSpent) seconds" | xargs
}

# ==============================================================================
# Handle stdin
# ==============================================================================

# ()
function handleStdin {

  startTime=$(now)
  local i=0

  # store piped input so we can iterate over it more than once
  while read LINE; do
    local pipedFiles[$i]="${LINE}"
    i=$((i+1))
  done

  echo "Processing $i images..."

  forEachFileOfType pipedFiles[@] '.*(bmp|gif|jpeg|jpg|pcx|png|pnm|tga|tiff)' logFileSizeBeforeStarting

  # ImageAlpha
  if [ "true" == $USE_ALPHA ]; then
    forEachFileOfType pipedFiles[@] '.*(png)' runImageAlphaOnImage
    waitForImageAlpha
    forEachFileOfType pipedFiles[@] '.*(png)' logFileSizeAfterImageAlpha
  fi

  # JPEGmini
  if [ "true" == $USE_JPEGMINI ]; then
    forEachFileOfType pipedFiles[@] '.*(jpg|jpeg)' runJPEGmini
    waitForJPEGmini
    forEachFileOfType pipedFiles[@] '.*(jpg|jpeg)' logFileSizeAfterJpegMini
  fi

  # ImageOptim
  if [ "true" == $USE_OPTIM ]; then
    forEachFileOfType pipedFiles[@] '.*(bmp|gif|jpeg|jpg|pcx|png|pnm|tga|tiff)' runImageOptimOnImage
    waitForImageOptim
    forEachFileOfType pipedFiles[@] '.*(bmp|gif|jpeg|jpg|pcx|png|pnm|tga|tiff)' logFileSizeAfterImageOptim
  fi

  for entry in "${FILE_SIZES[@]}"; do
    local name=$(echo "$entry" | cut -d':' -f 1)
    local appName=$(echo "$entry" | cut -d':' -f 2)
    local size=$(echo "$entry" | cut -d':' -f 3)
    echo "$name $(toKb $size)kb ($appName)"
  done | sort

  endTime=$(now)
  success "Finished in $(getTimeSpent) seconds" | xargs

}

# ==============================================================================
# Logging
# ==============================================================================

# (): Display usage information
function usage {
  echo "Usage: imageOptim [options]"
  echo ""
  echo "Options:"
  echo ""
  echo "  -d, --directory     directory of images to process"
  echo "  -a, --image-alpha   pre-process PNGs with ImageAlpha.app *"
  echo "  -j, --jpeg-mini     pre-process JPGs with JPEGmini.app **"
  echo "  -q, --quit          quit all apps when complete"
  echo "  -h, --help          display this usage information"
  echo "  -e, --examples      display some example commands and uses"
  echo "  -v, --version       display the version number"
  echo ""
  echo "*  http://pngmini.com"
  echo "** https://itunes.apple.com/us/app/jpegmini/id498944723"
  echo ""
}

# (): Display usage examples
function examples {
  echo "### Optimise a directory of images"
  echo ""
  echo "This command will optimise all image files in your Awesome project."
  echo ""
  echo "    imageOptim --directory ~/Sites/Awesome # [options]"
  echo ""
  echo "### Optimise a filtered set of images"
  echo ""
  echo "This command will optimise just the .jpg files in your Awesome project."
  echo ""
  echo "    find ~/Sites/Awesome -name '*.jpg' | imageOptim # [options]"
  echo ""
  echo "### Passing additional options"
  echo ""
  echo "The long format for enabling options is as follows;"
  echo ""
  echo "    imageOptim --jpeg-mini --image-alpha --quit --directory path/to/images"
  echo ""
  echo "The equivalent of the above in short format is as follows;"
  echo ""
  echo "    imageOptim -j -a -q -d path/to/images"
  echo ""
  echo "### Adding to git pre-commit hook"
  echo ""
  echo "Adding the below to `your_project/.git/hooks/pre-commit` will run ImageOptim-CLI"
  echo "each time you commit new and changed files into your project. Any files which"
  echo "aren't images will be ignored."
  echo ""
  echo "    git diff --cached --name-only --diff-filter=ACM | imageOptim # [options]"
  echo ""
}

# ($1:message): Display a red error message and quit
function error {
  printf "\e[31mâ $1"
  echo "\033[0m"
  exit 1
}

# ($1:message): Display a message in green with a tick by it
function success {
  printf "\e[32mâ ${1}"
  echo "\033[0m"
}

# ($1:file, $2:logName)
function addFileSizeToLog {
  local key=$2
  local file=$1
  local size=$(sizeInBytes "$1")
  local file=${file//[^a-zA-Z0-9]/x}
  eval "${key}_${file}=${size}"
}

# ($1:file)
function logFileSizeBeforeStarting {
  addFileSizeToLog $1 "original"
}

# ($1:file)
function logFileSizeAfterImageAlpha {
  addFileSizeToLog $1 "imagealpha"
}

# ($1:file)
function logFileSizeAfterImageOptim {
  addFileSizeToLog $1 "imageoptim"
}

# ($1:file)
function logFileSizeAfterJpegMini {
  addFileSizeToLog $1 "jpegmini"
}

# ==============================================================================
# Misc Functions
# ==============================================================================

# ($1:array, $2:filter, $3:iterator)
function forEachFileOfType {
  declare -a array=("${!1}")
  for file in "${array[@]}"; do
    if [ "" != "`echo "$file" | grep -E $2`" ]; then
      $3 "$file"
    fi
  done
}

# (): Get a timestamp for the current time
function now {
  date +"%s"
}

# (): How long did ImageOptim.app take to process the images?
function getTimeSpent {
  let timeSpent=endTime-startTime-$WAIT_INTERVAL
  echo $timeSpent
}

# ($1:dirPath): How many images are in the directory we're about to process?
function getImgCount {
  echo $(find -E "$1" -iregex $OPTIM_TYPES | wc -l)
}

# ==============================================================================
# Validators
# ==============================================================================

# (): if an override is not set, get path to this executable
function initCliPath {
  if [ "false" == $CLI_PATH ]; then
    CLI_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
  fi
}

# (): quit if -d, --directory does not resolve
function validateImgPath {
  if [ "directory" == $RUN_MODE ] && [ ! -d "$DIR_PATH" ]; then
    error "$DIR_PATH is not a directory, or could not be found"
  fi
}

# ($1:appBundleId): eg. "net.pornel.ImageAlpha" -> "ImageAlpha.app" or "NOT_INSTALLED"
function getAppFileNameByBundleId {
  echo `osascript "$CLI_PATH/imageOptimAppleScriptLib" has_app_installed $1`
}

# ($1:appFileName, $2:appBundleId): -> "true" or "false"
function appIsInstalled {
  if [ $1 == $(getAppFileNameByBundleId $2) ]; then
    echo "true"
  else
    echo "false"
  fi
}

# (): -> "true" or "false"
function imageOptimIsInstalled {
  echo $(appIsInstalled $OPTIM_FILE $OPTIM_ID)
}

# (): -> "true" or "false"
function imageAlphaIsInstalled {
  echo $(appIsInstalled $ALPHA_FILE $ALPHA_ID)
}

# (): -> "true" or "false"
function jpegMiniIsInstalled {
  if [ "true" == $(appIsInstalled $JPEGMINI_FILE $JPEGMINI_ID) ] || [ "true" == $(appIsInstalled $JPEGMINI_FILE $JPEGMINI_ID_RETAIL) ]; then
    echo "true"
  else
    echo "false"
  fi
}

# (): -> "true" or "false"
function guiScriptIsEnabled {
  echo `osascript "$CLI_PATH/imageOptimAppleScriptLib" has_gui_script`
}

# ($1:appShouldBeRun, $2:appIsInstalled, $3:isNotInstalledMsg):
function errorIfNotInstalled {
  if [ "true" == $1 ] && [ "false" == $2 ]; then
    error "$3"
  fi
}

# (): quit if ImageOptim should be run but is not installed
function validateImageOptim {
  errorIfNotInstalled $USE_OPTIM $(imageOptimIsInstalled) "$OPTIM_FILE is not installed (http://imageoptim.com)"
}

# (): quit if ImageAlpha should be run but is not installed
function validateImageAlpha {
  errorIfNotInstalled $USE_ALPHA $(imageAlphaIsInstalled) "$ALPHA_FILE is not installed (http://pngmini.com)"
}

# (): quit if ImageAlpha should be run but is not installed or cannot run
function validateJpegMini {

  # if we're not running JPEGmini then it's all good
  if [ "false" == $USE_JPEGMINI ]; then
    return 0
  fi

  # if we are and it's not installed
  if [ "false" == $(jpegMiniIsInstalled) ]; then
    error "$JPEGMINI_FILE is not installed (https://itunes.apple.com/us/app/jpegmini/id498944723)"
  fi

  # if we are, it's installed but GUIScript is not available
  if [ "false" == $(guiScriptIsEnabled) ]; then
    error "To automate JPEGmini we need to enable GUI Scripting, check 'Enable access for assistive devices' under Accessibility in System Preferences, then run ImageOptim-CLI again"
  fi

}

# ==============================================================================
# Handle CLI Options
# ==============================================================================

while [ "$1" != "" ]; do
  case $1 in
    -d | --directory )
      shift;
      RUN_MODE="directory"
      DIR_PATH=$1
      ;;
    -a | --image-alpha )
      USE_ALPHA="true"
      ;;
    -j | --jpeg-mini )
      USE_JPEGMINI="true"
      ;;
    -q | --quit )
      QUIT_AFTER="true"
      ;;
    -h | --help )
      usage;
      exit 0
      ;;
    -e | --examples )
      examples;
      exit 0
      ;;
    -v | --version )
      echo $VERSION;
      exit 0
      ;;
    * )
    usage
    exit 1
  esac
  shift
done

# ==============================================================================
# Run
# ==============================================================================

initCliPath
validateImgPath
validateImageOptim
validateImageAlpha
validateJpegMini

if [ "directory" == $RUN_MODE ]; then
  handleDirectory
elif [ "stdin" == $RUN_MODE ]; then
  handleStdin
fi
